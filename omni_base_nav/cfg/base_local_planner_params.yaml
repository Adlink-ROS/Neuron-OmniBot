TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  acc_lim_theta: 0.3
  acc_lim_x: 0.6
  acc_lim_y: 0.6

  #Set the velocity limits of the robot
  max_vel_x: 0.6
  min_vel_x: 0.2
  max_vel_theta: 0.6
  min_vel_theta: -0.6
  min_in_place_rotational_vel: 0.2
  y_vels: [-0.6, -0.2, 0.2, 0.6]

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.25
  
  #For this example, we'll use a holonomic robot
  holonomic_robot: true

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.08 # m
  yaw_goal_tolerance: 0.5 # rad
  latch_xy_goal_tolerance: false

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  sim_time: 2.0
  sim_granularity: 0.02 # meter
  vx_samples: 50
  vtheta_samples: 20

  #Parameters for scoring trajectories
  meter_scoring: true # true: unit is meter, false: cell
  pdist_scale: 3 # max is 5
  gdist_scale: 2 # max is 5
  heading_scoring: false
  heading_lookahead: 0.2 # meter
  heading_scoring_timestep: 0.5 # secs

  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: false

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.1

  #Eat up the plan as the robot moves along it
  prune_plan: true
